// Package tracer Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// tracer.js
package tracer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tracerJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x4b\x73\x23\xb7\xf1\xbf\xeb\x53\xb4\x7d\x30\x87\x16\x45\x49\xfb\xff\x27\x07\x2a\x4a\x6a\xcd\x65\xd6\x5b\xa5\x58\xae\x15\x77\x2f\x2a\x95\x05\xcd\x34\x49\x44\x43\x60\x0c\x60\x24\xd1\xb6\xbe\x7b\x0a\x98\x17\x5e\xc3\xc7\xc6\x95\x4a\x55\xbc\x97\x15\x67\xba\x1b\xfd\xc2\x0f\xdd\x8d\x39\x3d\x05\x25\x48\x8a\x02\x48\x9e\xf3\x67\x09\xef\x51\xad\x06\x12\xee\x33\x7c\x28\x97\x3f\x99\x77\x73\x41\x98\x24\xa9\xa2\x9c\xdd\x83\xe2\xb0\xa6\x6b\x9a\x82\x5a\x21\xf0\x52\x15\xa5\x02\xbe\x80\x1f\x89\xa0\x6a\xa3\x19\x0d\xcb\x4f\x02\x8b\x9c\x6c\x6c\xce\xa3\x5f\x8f\x00\x00\x4e\x4f\x61\xbe\x42\x48\x49\x9e\x83\x54\x24\x7d\xd4\xdc\x5a\xd6\xec\xf3\x3f\x00\x5f\x30\x2d\x35\xf5\xd8\xd0\x6a\xa2\x1b\x4d\x33\x81\xdb\x5f\x5f\xef\x46\x47\x8d\x04\xa9\xb0\x00\x2a\x81\xb2\x27\xfe\x88\x19\x2c\xb8\x00\x7c\x42\xb1\x01\x5e\xa4\x3c\x43\x50\x2b\xa2\x8c\xd4\x56\x28\xca\x4a\xa6\x66\x4d\x72\xbe\x1c\x41\xf6\x30\x84\x4a\xa7\x5a\xea\x94\x14\xaa\x14\x08\x84\x6d\x00\x85\xe0\x42\x02\x5d\xaf\x31\xa3\x44\x61\xbe\x69\x29\x53\xce\xa4\xaa\x08\xe0\x12\x72\xbe\x1c\x2f\x51\xcd\xf4\xcf\x64\x78\x71\xd4\x92\xd1\x05\x24\x15\xd1\x57\x97\x97\x50\xb2\x0c\x17\x94\x61\x66\xaf\xa9\xff\xa9\x15\x95\xe3\x05\x29\x73\xd5\x6a\x75\xd1\x12\xbc\x02\xe6\x12\x63\x1c\xb2\x4c\x53\x94\x32\xc6\x63\xfe\x7a\xed\x9c\x65\x84\xdb\xde\x7a\x5e\x21\x33\xce\x21\xa9\x2a\x49\xde\x79\x5d\x87\x82\xb0\xc6\x87\x0b\x42\xf3\xda\x69\xae\x7e\xae\xd7\x3e\x54\xe1\x53\xbc\x58\x73\xa9\xaa\xc0\x92\x5c\x20\xc9\x36\x20\x74\x50\x14\x66\x23\xc8\x38\x1b\x28\x58\x11\x96\xe5\x58\xad\x9d\x65\x54\xaf\x49\xf2\x5a\x41\xb2\x24\x94\x39\xde\x33\x86\x2a\x5e\x4c\x49\x9e\x27\xc3\x71\xed\xf1\x9d\xce\x2c\xca\x3a\x1a\x39\x5f\xf6\xfa\xc5\x21\xb2\xa4\xb4\xeb\xb6\xb9\x37\xce\x91\x2d\xd5\x0a\xfe\x0a\xe7\x5b\x97\xfb\xc0\xe6\xb5\xaa\xde\xba\xbd\x31\xec\x38\xbf\xe3\x4a\xf1\x75\x8c\x39\xaa\xb4\xbb\x94\x1b\x8e\x1f\x79\x01\x7c\x51\xc5\xe4\x9f\xa5\x54\x26\x8c\x98\x99\xb8\x78\x29\x6c\x42\x75\x09\x9e\xb9\x05\x2f\x12\x4b\x03\x4f\xd3\x66\xd5\x91\xe1\x0e\xe9\xe4\x6a\xba\xa2\x79\x66\xc8\x2c\x8a\xd0\x02\xcf\x64\xcb\x88\x50\xb9\x87\x8e\xf6\x40\xcd\xc2\x75\x3d\x32\x7b\x5d\x92\xe7\xe3\x9d\xdb\x5a\xe3\x04\x67\xb2\x5c\x23\x98\x4c\x7f\x22\x34\x27\x0f\x39\xc2\x92\x48\x20\x2c\x83\x34\x47\xc2\x0c\x86\xe4\xb8\x50\xfc\x09\x85\x74\xb2\xcb\x2c\xb3\x24\xf2\x3b\xba\xfc\xc0\xd4\x76\x70\x68\x68\x3f\x49\xcc\x6a\xfa\x4b\x70\x05\xd8\xb9\xd2\xfe\x99\x61\x8e\xaa\x02\xd9\x71\x85\xd1\xd7\x8b\x85\x44\x8b\x38\xa4\xb8\x32\x69\xee\xba\xad\xdd\x7c\x96\x5e\x02\x55\x29\x98\x97\x35\xb7\xf1\x3d\x73\x02\xe7\x77\xae\x44\x3b\x94\x3b\x85\x9e\xdd\xf9\x51\x74\xd2\xab\xf9\x2b\x4c\x9e\x5a\xef\x26\x7f\x5a\x33\x3c\x78\xae\x9f\x9b\x15\xe5\x0e\x64\x71\x49\xe1\xf6\x2e\xea\x78\x87\xcc\x6c\x07\x4b\xcd\xd0\x98\xf7\x44\xce\x79\xcf\x5e\xfe\x22\x4b\xba\xbc\xda\xcb\x1a\x8b\xbc\xc9\xf8\xf7\x44\x26\x01\x00\x79\x3c\x4e\x3a\x86\xb2\x4e\x1c\x59\xdd\xcf\x29\x97\x2a\xf1\xbc\xe0\x9f\x63\x81\x03\x78\x51\xeb\xc6\x8b\xb1\xe2\x37\x4a\x50\xb6\x74\xcc\xaf\x10\x02\x17\x5c\xe0\x75\x61\x9d\x87\x2d\x81\x7c\xa6\x2a\x5d\x41\xc2\x8b\x70\x7b\x49\x84\xc1\xf4\xe3\xec\xed\x7c\x36\x98\x38\xaf\x5a\xc9\xa9\x40\xa2\x6a\xc9\x96\x5f\x9a\x7f\x0f\x02\xc9\xe3\x45\xaf\xd4\x37\xdb\xc5\xbe\x39\x5c\xee\xcd\xec\xea\xef\xef\x66\x37\xf3\x8f\x9f\xa6\xf3\x3e\xe1\x12\xf3\xc5\x3b\x94\x4a\x94\xa9\x72\x7c\xb2\xbf\xf6\x6f\xaf\xae\x3c\xe9\xdd\x8b\xe9\xf5\x3b\xdf\x5d\xd5\xcb\x77\xb3\xab\xd9\xfb\xb7\xf3\x59\x2f\xf7\xcd\xfc\xed\xfc\xc3\x34\xf2\xba\xf3\x0b\xc9\xf3\x46\x65\x5e\x1c\xa2\xf2\xc7\xd9\xe7\xd9\xc7\x5e\x97\x54\x95\xc8\xb5\x73\xb4\xf5\x88\x74\xcf\xdc\x20\xb3\xec\xe3\xf6\xdb\x6f\x3b\x61\xdf\xc2\x3b\x2c\xd4\x4a\xda\x4f\xce\xe0\x04\xee\x53\xf5\x72\x3f\x06\xf8\x41\x6b\x00\x72\xa5\x8b\xec\xb2\x00\xca\xe0\xbe\xde\x17\x86\x2f\x19\xde\xdb\x9c\xe7\x70\x02\x0b\x2a\xa4\x82\x1c\x9f\x30\xd7\x95\xd9\x16\x72\x9b\xb3\x85\x4f\xa0\x2c\xc3\x17\x94\x3d\x74\x5a\xb7\x42\x62\x99\xf1\x93\xa6\x18\x67\xd9\x09\x65\xa6\x98\x36\x4a\x6b\x1d\x29\xa3\x8a\x92\x9c\xfe\x82\x02\x92\x7b\xaf\x20\xbf\x1f\xc6\x55\xae\x82\x08\x94\x49\x9a\xa1\x51\x5d\x8b\xb3\x68\x4f\xbd\x4d\x9e\xf3\xa5\xb1\xaa\x83\xa1\xda\xc8\x8b\x48\x55\x60\x14\x68\xc8\xa3\xe7\x8e\x07\x8e\xad\xf4\xbf\x78\xfc\x3e\x1e\x78\xe5\x53\x4e\xda\x7a\x96\x65\xb0\xc4\xaa\xa3\xe8\xaa\x65\x81\xb2\xcc\x95\x74\x73\x71\x77\x65\x15\xa1\x17\xd8\x20\xb0\xac\x28\x11\x1f\x93\x33\x9f\x56\xdb\xf2\x95\x40\x35\xc6\x9f\x4b\x92\xcb\xe4\x6c\xe8\x1b\x00\x76\x8d\xa1\x36\x05\x9a\x63\x60\x50\x81\xcd\x00\x7e\xfb\x0d\xa2\x6f\xde\x0c\x62\x82\xa0\x29\x40\x2a\xa2\x6c\xca\x99\xee\xed\xd4\xdb\x2c\x13\x28\xe5\xf7\x44\x9a\x00\xf0\xef\xf1\x25\x51\xbc\x7e\x9a\x68\xfd\x5a\x9c\x3e\xff\xf3\x70\x18\xd9\x70\x7d\x92\xa7\xba\xed\x68\x44\x66\x0f\xd5\x99\x91\xe1\x56\xe9\x11\xf1\xd1\x8a\xdb\x59\xb7\xee\x5b\x9b\xa5\xb4\xe3\xd7\xb8\xe6\x62\x33\x96\x39\x4d\x31\x09\x0a\xa7\x51\x58\x4b\xc1\x71\x58\x3d\x45\xb5\x39\x8a\xe8\xd6\x06\x69\x8f\xa6\x06\xfc\xda\x74\x40\x99\x42\x51\x75\x4e\x34\x2f\x05\x0e\xdc\x55\x5f\xdd\xb4\xd9\x5d\x0c\xc6\xa9\xae\xfc\xbd\x04\x3b\xcb\x7c\xd7\xde\xfe\xbe\x27\x52\xf9\xf4\xe1\xaf\x73\xfe\x06\xd5\x01\x65\x5d\x3c\x82\x0d\x74\x3e\x1c\x3f\x91\xbc\xc4\xeb\x45\x08\x24\x86\xb1\xb2\x30\x64\x7c\xb3\x8b\x71\xc6\x32\xb8\x74\x16\x3f\xb6\x25\xfa\x3c\x46\xf4\x67\x2d\x71\xc7\x2e\x77\xd0\xc3\xf3\xdc\xa6\xc0\x49\xbb\x95\x47\xce\xbb\x85\xe0\xeb\x89\x95\xcb\x69\xbd\x9f\xf4\x06\x6a\x76\xce\x70\xe8\xf2\x68\x60\x9f\xf4\xe5\xbf\x65\xd9\xa8\xb5\xd8\x97\x60\x5c\x54\x95\x7c\x13\x78\x30\xff\x27\x9d\xa5\xd6\x36\x3d\x1b\x76\xe7\xc4\xab\xd7\xbf\x59\xe8\x68\x8a\xe5\xb0\x4e\x76\x2b\xa5\x3f\x32\xa0\x81\xec\xff\xa1\x14\xe8\xa9\x67\xc3\x99\x81\x7b\x42\xd5\xae\x8e\xba\xc2\x6f\x20\x5c\x48\x8b\x3a\x5e\x6b\x91\xd5\x5a\x6c\xf1\xbe\xa7\x84\xe7\x31\xc5\x27\xc1\x91\x19\xe4\x83\x77\xc4\xb9\x12\xda\x3e\x6b\xe2\xb4\x59\x01\x51\xd7\xa4\x4d\xdc\x06\x6c\x4b\x08\xab\x33\xf7\x3b\x92\x13\xa6\x4f\x41\xcf\x92\x2e\x82\xfe\x16\x75\x8b\xf6\x48\x13\x6b\x8e\xda\x1e\x7b\xcf\x3d\x7b\xdd\x61\xcb\xcd\x23\x2d\xcc\x34\xa5\x10\x78\x92\xf2\x75\x41\x73\x34\x93\xcc\x94\xe8\x22\x4c\x8e\x40\xad\xb8\x44\x20\xa2\x9d\x77\xb1\xb4\x99\x03\xbb\x93\x97\xaf\xa8\xfc\x51\x60\x2d\x23\x4b\x14\x0f\xea\xa7\x36\x1f\xa7\xa5\x54\x7c\xdd\xd9\x34\x02\xc5\xfb\x8f\xa8\x3e\x86\xc0\x11\xc6\xea\x16\xac\x12\xdd\xdb\xea\x2a\xcc\xe9\x9b\x74\x95\xd6\xbc\xb0\xfa\x25\xf8\x1b\x9c\xc1\x04\xce\x43\xb0\xd8\x8a\x80\x6f\xe0\xd8\x5e\xf5\x4b\xf1\xf0\xff\x0e\x13\xb3\x13\x1d\x0f\xc1\x3b\x92\xe7\xde\x76\xd3\x8f\xe6\xe6\xad\x19\x0a\x5c\xf1\x67\x14\x53\x22\xd1\xcf\xed\x2f\x01\x45\x7b\x83\x06\x78\x59\x94\xff\x26\x60\xda\xf5\xd7\xc4\x77\xf2\xff\xf7\x3a\x39\x26\xa4\x72\x65\x20\xe4\x4f\xbd\x42\x6c\x00\xde\x7f\x38\x72\xe0\x20\xa0\x09\xcf\xd8\xc2\x15\xb8\x6c\xce\x86\xe0\x94\x3d\xa4\xc1\xdf\x32\x5d\x80\x0a\x2b\xcc\x9a\x40\xd9\x0a\x05\x55\x98\x99\xf8\x83\x4c\x79\x81\x90\x95\x1a\x5f\xea\x6b\x27\xfc\xb9\x44\x96\x52\xb6\x3c\x60\xec\xb2\x6d\x72\x71\x7a\x0a\x0f\x1b\x30\xe5\xbb\xb9\xd3\xd0\x01\x50\x34\x85\x6a\x58\xa8\x04\x61\x72\x81\x02\x18\xaf\x34\xdc\xdf\x61\xe3\x5f\x50\xf0\xbd\x5c\x94\xa1\xb9\x45\x89\x4d\x3f\x04\x7f\x86\xaf\x3f\xb1\x47\xc6\x9f\x19\xa4\x06\xa7\x2a\x3f\xf0\x02\xbe\x86\x63\xe0\x45\x7c\x94\xb9\xdf\xd9\xdc\x0d\x56\xac\xfc\x89\xdf\xdc\xc0\xc0\xee\x9d\xab\x9b\xa1\x81\x2b\xed\xf4\xb4\xee\xaa\x83\xfb\x2a\xad\xb0\xb9\x72\xac\x80\x1d\x56\xe4\x09\xe1\x01\x91\x01\x55\x28\x74\x17\x09\xfc\x09\x85\x69\xd5\xab\x69\xb2\x6c\x24\x6a\xb6\x05\xd5\xfd\x52\x2d\xbb\xbe\x71\xd4\x58\x40\xd9\x72\x5c\xdb\xa1\x5f\x25\xa9\x7a\x89\xd7\x16\x35\x6b\xd3\xd4\xab\x97\x39\xff\xe8\xb2\xf8\x48\xb8\xa0\xb9\x42\x81\x59\xc3\x53\xfd\xfe\x81\xab\x4f\x4d\xa7\x97\x54\x42\xe3\x53\x8e\x2a\x49\xb1\xe1\xae\x93\x16\x93\x46\xec\x08\x6e\xef\x46\xed\x22\x76\xfa\xe8\x37\xc3\xb1\x2d\xa4\x5b\xc0\x1e\xb4\x23\xd3\xae\x9c\x5a\x74\x89\xcd\xe4\x1f\xf2\x11\x93\x2d\x2f\x3d\x11\x51\xfb\x28\x82\x2e\xa9\x7a\x31\x43\x87\xbd\x31\xa6\x8b\x88\xe3\xf1\xaa\xdf\x54\x2f\x87\x0f\x62\xf7\x94\x6f\x6a\xeb\x48\x44\xf7\x5c\x25\x36\xee\xed\x5d\xe6\xcd\xfe\xeb\x58\xdb\xb2\x0e\x60\xe3\xea\x20\x42\xad\x8b\xfa\x33\xf8\xf0\x63\x36\xf6\xd6\xa9\x79\xd5\xcb\x58\xff\xee\x3d\x4b\x4d\x02\xf8\xe7\x69\xac\x7b\xd0\x84\x4f\x61\xf3\xd0\x5b\x02\x5b\x6c\x4b\xe2\x17\xdb\x5e\x15\xec\xd2\xea\x37\xdb\x0e\x78\x4d\x66\x1e\xc4\x0f\xce\xe6\xf6\xb1\xbe\xc7\x6c\x5a\x07\x19\xee\x69\xe7\x9e\xf2\x5a\x5c\x9b\xd3\xbb\x26\x1b\x41\x95\xcd\xfb\x84\x77\xab\x88\x20\xda\x0d\xe6\x56\x3b\xdd\x5c\x63\x7a\x4b\xed\xf9\x81\x42\xb5\x4a\x8b\xe1\xe6\xff\x1d\xb7\xdb\x35\x8b\x37\x65\xd3\x0e\xad\x1e\xf5\x57\xd2\x91\x4d\x78\x68\x1e\xef\x1a\x90\xf4\xe4\xaa\xdd\x0c\x77\xa1\xff\xaf\x4b\xd8\xdf\x37\x17\xa7\xee\xfc\xd5\xce\x28\xff\x16\x6d\x27\xee\x78\x98\xf6\x45\x61\xdb\x36\xd5\xf8\x23\x6e\xbf\x77\xdc\xb6\xac\x1c\x44\xaf\xbb\xb7\xdf\xfe\x51\x86\x43\xdd\x8a\xd5\x05\x6d\x4b\x5e\x5d\x8e\x7b\x40\x14\x70\xec\x83\x49\xa9\x2b\xbb\x65\xde\xf5\xfd\xcc\x6e\x07\xfe\x67\xe1\x74\x2f\x34\xdd\xe3\x16\xa6\x3e\x65\x2f\xf6\x60\xef\xbb\x6a\xa9\x45\xf4\x22\x74\x67\xba\x57\xfb\xd5\xe7\xc2\xef\x91\x36\x24\xcf\x67\xb5\x7b\xac\xac\xf1\x17\xb0\xb2\xa6\x65\xd8\xea\x79\x0c\x64\xce\xf6\x38\xcb\xea\x8a\x5c\xbd\x34\x2a\x69\x0f\xf9\xba\x34\xfa\xb4\x64\x5b\x15\xb1\x95\x69\x38\xfc\x1b\x9c\xee\x2f\x7f\x27\x5b\x07\x70\x13\x94\x48\x67\xe1\x7f\xdc\xb4\xe0\x02\x12\x1d\xa7\x47\xdc\x00\x65\xc1\xc7\x4f\x60\xdd\x1c\xde\x3e\xe2\xe6\x6e\xf7\x9d\x94\x75\x63\x64\x38\xf6\x30\xa1\xbd\xf6\x4a\x77\xef\xf1\x56\x63\x0a\x97\x70\x76\x01\xb4\xbe\xbe\xad\xbf\xad\xa9\x6f\x7a\x81\x1e\x1f\xf7\x5e\x98\x19\xca\x5b\x7a\xb7\xa5\x03\x73\xe8\x86\xfb\x47\x41\xb3\x04\xad\x6b\xd3\xa3\xe9\xa4\xd1\xed\xad\xec\x5a\x4f\xfa\x4b\xfd\x0d\x9e\xac\xa6\x12\xa4\x6a\xc1\x95\x40\x04\xc5\x9b\x9f\x8d\x00\x23\x50\xda\x4d\xd9\xc8\x69\x0a\x47\xdd\x77\x67\x9f\xed\xbe\xcf\x7c\x7b\xdb\x8c\x6b\xc3\xe9\x63\xf9\xd0\x20\x66\x6a\xe1\x70\x24\x9e\x01\x44\x57\xd7\xc6\x96\x74\xed\x52\xeb\xe7\x45\x24\xc6\xd6\x2d\xb3\xee\x1e\xe0\x9b\x6f\x3a\xd9\xf3\xf6\x9d\x5e\x75\x49\x14\x1a\x9a\xe8\xf7\x6f\xee\x60\x24\x66\x78\xb4\x51\xd2\xa9\xc3\xf0\x79\xea\xf6\xd2\xb6\x17\xc7\x29\x67\x29\x51\xc9\xad\x7e\x78\xe7\x63\x79\xeb\xad\x83\xb3\xb4\xe1\xdc\x99\xa3\x26\x2a\x0c\xa5\xc2\xac\xd1\x29\x0b\xfa\xfd\x80\xcd\xe4\x46\xbd\xc4\x2d\xbd\x1b\x45\x09\x3c\xcb\xe3\x44\xbe\x7b\xe3\x54\x76\x9c\x5b\x97\xd1\xbb\x61\x40\x1c\xe9\x63\xc3\x00\x78\xe6\xf6\x8c\x29\x60\xc7\xf6\x0b\xd3\xa4\x91\x31\xf1\xd7\xb4\x2b\x2f\xb0\x4f\xb2\xf8\xf4\x43\x46\x51\xd3\xc3\xa0\xad\xa1\xf5\x66\x2b\x49\x04\x5d\xe2\x78\x22\xfb\x14\x0c\xd0\xbc\x29\x07\xcd\x1e\xf0\x2f\xe0\x9b\x97\xef\x89\xdc\xf2\x4a\x57\xa5\xcd\xeb\xdd\xe0\xe6\xae\x15\x20\x8b\xbb\x45\xfd\xb4\x8a\x43\x8c\x43\xe0\x02\xcd\x53\x7d\x51\x3a\x38\x7b\x19\xc0\xb1\x2d\xdd\xb9\x29\x0a\x54\x6c\x2d\x0e\x14\xb4\x3f\x74\xec\xfb\x7e\xd6\x56\xce\x7a\xed\x80\xc2\x9e\xdf\x57\xda\xcb\x45\x27\xb9\xaf\x9e\xc5\x4b\x22\x3b\x7b\x5b\xee\x9d\xd6\x76\x41\x8c\x59\x1c\xfd\x6a\xb8\x7b\xd8\x6b\xb9\x4d\xe2\x5b\x6f\xcb\xdc\xe1\x01\x67\xf9\x7d\xbd\xa0\x99\x1c\x4f\x74\x52\x62\xde\x38\x7a\x3d\xfa\x57\x00\x00\x00\xff\xff\x27\xae\x11\x14\xc2\x32\x00\x00")

func tracerJsBytes() ([]byte, error) {
	return bindataRead(
		_tracerJs,
		"tracer.js",
	)
}

func tracerJs() (*asset, error) {
	bytes, err := tracerJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tracer.js", size: 12994, mode: os.FileMode(511), modTime: time.Unix(1579589372, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tracer.js": tracerJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tracer.js": &bintree{tracerJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
