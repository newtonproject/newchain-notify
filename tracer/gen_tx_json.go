// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package tracer

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
)

var _ = (*txMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (t Tx) MarshalJSON() ([]byte, error) {
	type Tx struct {
		From   common.Address  `db:"from"`
		To     *common.Address `db:"to"`
		Input  hexutil.Bytes   `db:"input"`
		Output hexutil.Bytes   `db:"output"`
		Value  *hexutil.Big    `db:"value"`
	}
	var enc Tx
	enc.From = t.From
	enc.To = t.To
	enc.Input = t.Input
	enc.Output = t.Output
	enc.Value = (*hexutil.Big)(t.Value)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (t *Tx) UnmarshalJSON(input []byte) error {
	type Tx struct {
		From   *common.Address `db:"from"`
		To     *common.Address `db:"to"`
		Input  *hexutil.Bytes  `db:"input"`
		Output *hexutil.Bytes  `db:"output"`
		Value  *hexutil.Big    `db:"value"`
	}
	var dec Tx
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.From != nil {
		t.From = *dec.From
	}
	if dec.To != nil {
		t.To = dec.To
	}
	if dec.Input != nil {
		t.Input = *dec.Input
	}
	if dec.Output != nil {
		t.Output = *dec.Output
	}
	if dec.Value != nil {
		t.Value = (*big.Int)(dec.Value)
	}
	return nil
}
